################################################################################################
# Creating an Entire VPC Environment in AWS                                                    #
#                                                                                              #
# By Robert J. Calva - Red Hat LATAM - 2018                                                    #
#                                                                                              #
# NOTE: just set the aws_region, aws_zone, vpc_name, aws_keypair, cidr_block  and              #
# volume_type variables as you wish!                                                           #
#                                                                                              #
# IMPORTANT: regarding storage_type information, please take a look at this link:              #
# http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html                       #
#                                                                                              #
# Variable examples:                                                                           #
#                                                                                              #
# aws_region could be: sa-east-1 or us-east-1                                                  #
# aws_zone could be: sa-east-1a, sa-east-1b, us-east-1a, us-east-1b                            #
# name_zone could be: example.com                                                              #
# volume_type could be: standard or gp2                                                        #
#                                                                                              #
# Enjoy!                                                                                       #
################################################################################################
- name: Create an Entire VPC Environment in AWS
  hosts: localhost
  connection: local
  tasks:
  - name: Create the VPC in AWS {{ aws_region }}
    ec2_vpc_net:
      state: present
      name: "Workshop VPC {{ vpc_name }}"
      cidr_block: "{{ cidr_block }}"        
      region: "{{ aws_region }}"
    register: vpc
    until: vpc is not failed
    retries: 3
    
  - name: Create an AWS Security Group for our Workshop
    ec2_group:
      name: "aws-workshop-sec-group"
      region: "{{ aws_region }}"
      description: Workshop Security Group
      vpc_id: "{{ vpc.vpc.id }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
    register: aws_workshop_sec_group
    until: aws_workshop_sec_group is not failed
    retries: 3
    
  - name: Create Subnet for VPC {{ vpc_name }}
    ec2_vpc_subnet:
      region: "{{ aws_region }}"
      vpc_id: "{{ vpc.vpc.id }}"
      az: "{{ aws_zone }}"
      cidr: "{{ cidr_block }}"
      wait_timeout: 600
    register: subnet
    until: subnet is not failed
    retries: 10 
    
  - name: VPC Internet Gateway is Present for VPC {{ vpc_name }}
    ec2_vpc_igw:
      region: "{{ aws_region }}"
      vpc_id: "{{ vpc.vpc.id }}" 
    register: igw
    until: igw is not failed
    retries: 10
    
  - name: VPC Public Subnet Route Table is Present for VPC {{ vpc_name }}
    ec2_vpc_route_table:
      region: "{{ aws_region }}"
      vpc_id: "{{ vpc.vpc.id }}"
      subnets:
       - "{{ subnet.subnet.id }}"
      routes:
       - dest: 0.0.0.0/0
         gateway_id: "{{ igw.gateway_id }}"
    register: routetable
    until: routetable is not failed
    retries: 3

  - name: set variables for instance creation
    set_fact:
      ec2_vpc_id: "{{ vpc.vpc.id }}"
      ec2_subnet_id: "{{ subnet.subnet.id }}"

  
  - name: Creating an AWS Instance in our VPC 
    ec2:
      key_name: "{{ aws_keypair }}"
      group: aws-workshop-sec-group
      instance_type: t2.micro
      image: ami-b63769a1
      wait: yes
      wait_timeout: 500
      volumes:
      - device_name: /dev/sda1
        volume_type: "{{ volume_type }}"
        volume_size: 10
        delete_on_termination: true
      termination_protection: no
      instance_tags:
        Name: "{{ instance_name }}"
      exact_count: 1
      count_tag:
        Name: "{{ instance_name }}"
      region: "{{ aws_region }}"
      vpc_subnet_id: "{{ ec2_subnet_id }}"
      zone: "{{ aws_zone }}"
      assign_public_ip: yes
    register: ec2
    
  - name: Add new instance to host group
    add_host: hostname={{ item.public_ip }} groupname=launched
    with_items: "{{ ec2.instances }}"

  - name: Wait for SSH to come up
    wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
    with_items: "{{ ec2.instances }}"

- name: Configure instance(s)
  hosts: launched
  gather_facts: True
  remote_user: ec2-user
  sudo: yes
 
  tasks:
  - name: Send email to students with AWS information
    sendgrid:
      api_key: "{{ sendgrid_api_key }}"
      subject: "{{ sendgrid_subject }}"
      body: "{{ sendgrid_body }}"
      to_addresses: "{{ user_email }}"
      html_body: yes
      from_address: "{{ sendgrid_from_address }}"
    delegate_to: localhost

